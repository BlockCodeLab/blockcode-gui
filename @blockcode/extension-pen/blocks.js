import{Text as S} from"@blockcode/ui";var M={en:{"extension.pen.name":"Pen","extension.pen.erase":"erase all","extension.pen.stamp":"stamp","extension.pen.down":"pen down","extension.pen.up":"pen up","extension.pen.penColor":"set pen color to [COLOR]","extension.pen.color":"color","extension.pen.saturation":"saturation","extension.pen.brightness":"brightness","extension.pen.changePen":"change pen [OPTION] by [VALUE]","extension.pen.setPen":"set pen [OPTION] to [VALUE]","extension.pen.changeSize":"change pen size by [SIZE]","extension.pen.setSize":"set pen size to [SIZE]"},"zh-Hans":{"extension.pen.name":"\u753B\u7B14","extension.pen.erase":"\u5168\u90E8\u64E6\u9664","extension.pen.stamp":"\u56FE\u7AE0","extension.pen.down":"\u843D\u7B14","extension.pen.up":"\u62AC\u7B14","extension.pen.penColor":"\u5C06\u7B14\u7684\u989C\u8272\u8BBE\u4E3A [COLOR]","extension.pen.color":"\u989C\u8272","extension.pen.saturation":"\u9971\u548C\u5EA6","extension.pen.brightness":"\u4EAE\u5EA6","extension.pen.changePen":"\u5C06\u7B14\u7684 [OPTION] \u589E\u52A0 [VALUE]","extension.pen.setPen":"\u5C06\u7B14\u7684 [OPTION] \u8BBE\u4E3A [VALUE]","extension.pen.changeSize":"\u5C06\u7B14\u7684\u7C97\u7EC6\u589E\u52A0 [SIZE]","extension.pen.setSize":"\u5C06\u7B14\u7684\u7C97\u7EC6\u8BBE\u4E3A [SIZE]"}};var Z="./assets/icon-15bbfffad9b0533c.svg";var a="./assets/pen-cc293606ef2b1358.py";var s=function(){return this.provideFunction_("pen_renderer",[`const ${this.FUNCTION_NAME_PLACEHOLDER_} = (item) => {`,"  let renderer = stage.layer.children['pen_renderer'];","  if (!renderer) {","    renderer = new runtime.core.Group();","    renderer.name = 'pen_renderer';","    stage.layer.addChild(renderer)","  }","  if (item) {","    item.visible = true;","    renderer.addChild(item);","  }","  return renderer;","};"])},h=function(){return this.provideFunction_("pen_draw",[`const ${this.FUNCTION_NAME_PLACEHOLDER_} = (target) => {`,"  if (target.data.pen_update) return;","  const item = new runtime.core.Group();","  item.data = {","    x: target.position.x,","    y: target.position.y,","  };","  target.data.pen_update = () => {","    const { x, y } = target.position;","    if (item.data.x !== x || item.data.y !== y) {","      item.addChild(new runtime.core.Path.Line({","        from: [item.data.x, item.data.y],","        to: [x, y],","        strokeColor: target.data.pen_color || '#000000',","        strokeWidth: target.data.pen_size || 1,","        strokeCap: 'round',","        strokeJoin: 'round',","      }));","      item.data = { x, y };","    }","  };","  target.util.on('update', target.data.pen_update)","  runtime.once('stop', () => {","    if (target.data.pen_update) {","      target.util.off('update', target.data.pen_update);","      target.data.pen_update = null;","    }","  });","  return item;","};"])};import{jsx as f} from"preact/jsx-runtime";var G={iconURI:Z,name:f(S,{id:"extension.pen.name",defaultMessage:"Pen"}),files:[{name:"pen",type:"text/x-python",uri:a}],blocks:[{id:"erase",text:f(S,{id:"extension.pen.erase",defaultMessage:"erase all"}),python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);return E+="pen.clear()\n",E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=s.call(this);return E+=`${_}().children.forEach((group) => group.removeChildren());\n`,E}},{id:"stamp",text:f(S,{id:"extension.pen.stamp",defaultMessage:"stamp"}),useStage:!1,python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);return E+="pen.stamp(target)\n",E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=s.call(this);return E+=`${_}(target.clone());\n`,E}},{id:"down",text:f(S,{id:"extension.pen.down",defaultMessage:"pen down"}),useStage:!1,python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);return E+="pen.down(target)\n",E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=s.call(this),N=h.call(this);return E+=`${_}(${N}(target));\n`,E}},{id:"up",text:f(S,{id:"extension.pen.up",defaultMessage:"pen up"}),useStage:!1,python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);return E+="pen.up(target)\n",E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);return E+="if (target.data.pen_update) {\n",E+="  target.util.off('update', target.data.pen_update);\n",E+="  target.data.pen_update = null;\n",E+="}\n",E}},{id:"penColor",text:f(S,{id:"extension.pen.penColor",defaultMessage:"set pen color to [COLOR]"}),useStage:!1,inputs:{COLOR:{type:"color"}},python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=this.valueToCode(g,"COLOR",this.ORDER_NONE)||"(0, 0, 0)";return E+=`pen.set_color(target, ${_})\n`,E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=this.valueToCode(g,"COLOR",this.ORDER_NONE)||'"#000000"';return E+=`target.data.pen_color = ${_};\n`,E}},{id:"changePen",text:f(S,{id:"extension.pen.changePen",defaultMessage:"change pen [OPTION] by [VALUE]"}),useStage:!1,inputs:{OPTION:{type:"string",default:"color",menu:[[f(S,{id:"extension.pen.color",defaultMessage:"color"}),"hue"],[f(S,{id:"extension.pen.saturation",defaultMessage:"saturation"}),"saturation"],[f(S,{id:"extension.pen.brightness",defaultMessage:"brightness"}),"brightness"]]},VALUE:{type:"number",default:10}},python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=g.getFieldValue("OPTION"),N=this.valueToCode(g,"VALUE",this.ORDER_NONE)||0;return E+=`pen.change_color(target, ${_} = num(${N}))\n`,E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=g.getFieldValue("OPTION"),N=this.valueToCode(g,"VALUE",this.ORDER_NONE)||0;if(E+="target.data.pen_color = new runtime.core.Color(target.data.pen_color).convert('hsb');\n",_==="hue")E+=`target.data.pen_color.${_} = (target.data.pen_color.${_} + runtime.number(${N}) * 3.6) % 360;\n`;else E+=`target.data.pen_color.${_} = runtime.clamp(target.data.pen_color.${_} + runtime.number(${N}) / 100, 0, 1);\n`;return E+="target.data.pen_color = target.data.pen_color.toCSS(true);\n",E}},{id:"setPen",text:f(S,{id:"extension.pen.setPen",defaultMessage:"set pen [OPTION] to [VALUE]"}),useStage:!1,inputs:{OPTION:{type:"string",default:"color",menu:[[f(S,{id:"extension.pen.color",defaultMessage:"color"}),"hue"],[f(S,{id:"extension.pen.saturation",defaultMessage:"saturation"}),"saturation"],[f(S,{id:"extension.pen.brightness",defaultMessage:"brightness"}),"brightness"]]},VALUE:{type:"number",default:50}},python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=g.getFieldValue("OPTION"),N=this.valueToCode(g,"VALUE",this.ORDER_NONE)||0;return E+=`pen.set_color(${_} = num(${N}))\n`,E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=g.getFieldValue("OPTION"),N=this.valueToCode(g,"VALUE",this.ORDER_NONE)||0;if(E+="target.data.pen_color = new runtime.core.Color(target.data.pen_color);\n",_==="hue")E+=`target.data.pen_color.${_} = runtime.number(${N}) * 3.6 % 360;\n`;else E+=`target.data.pen_color.${_} = runtime.clamp(runtime.number(${N}) / 100, 0, 1);\n`;return E+="target.data.pen_color = target.data.pen_color.toCSS(true);\n",E}},{id:"changeSize",text:f(S,{id:"extension.pen.changeSize",defaultMessage:"change pen size by [SIZE]"}),useStage:!1,inputs:{SIZE:{type:"number",default:1}},python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=this.valueToCode(g,"SIZE",this.ORDER_NONE)||1;return E+=`pen.change_size(target, num(${_}))\n`,E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=this.valueToCode(g,"SIZE",this.ORDER_NONE)||1;return E+=`target.data.pen_size = runtime.number(target.data.pen_size, 1) + runtime.number(${_}, 1);\n`,E}},{id:"setSize",text:f(S,{id:"extension.pen.setSize",defaultMessage:"set pen size to [SIZE]"}),useStage:!1,inputs:{SIZE:{type:"number",default:1}},python(g){this.definitions_.import_extension_pen="from extensions.pen import pen";let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=this.valueToCode(g,"SIZE",this.ORDER_NONE)||1;return E+=`pen.set_size(target, num(${_}))\n`,E},vm(g){let E="";if(this.STATEMENT_PREFIX)E+=this.injectId(this.STATEMENT_PREFIX,g);const _=this.valueToCode(g,"SIZE",this.ORDER_NONE)||1;return E+=`target.data.pen_size = runtime.number(${_}, 1);\n`,E}}],translations:M};export{G as default};
